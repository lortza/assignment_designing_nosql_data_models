# AGGREGATES

# from http://no.sqlzoo.net/wiki/AGGREGATE_Tutorial#First_and_last_country_by_continent

# 1. Give the name and the per capita GDP for those countries with a population of at least 200 million.
db.world.aggregate([
  {$match: {population: {$gte: 200000000} }},
  {$project: {
    _id:0,
    name:1,
    "per capita GDP": {$divide: ['$gdp', '$population']} }
  }
]);

# 2. Give the name and the population density of all countries in South America.
db.world.aggregate([
  {$match: {
    continent: 'South America',
    area: {$ne: 0}
  }},
  {$project: {
  _id:0,
  name:1,
  density: {$divide: ['$population', '$area']}
  }}
]);

# 3. Give the name and the population density of all countries with name after V in the alphabet. Note that because Vatican City (with area 0) is in Europe you will get a divide by zero error unless you filter first.
db.world.aggregate([
  {$match: {
    name: {$gte: 'V'},
    area: {$ne: 0}
  }},
  {$project: {
  _id:0,
  name:1,
  density: {$divide: ['$population', '$area']}
  }}
]);

# 4. Show the name and population in millions for the countries of the continent South America. Divide the population by 1000000 to get population in millions.
db.world.aggregate([
  {$match: {
    continent: 'South America'
  }},
  {$project: {
    _id:0,
    name:1,
    population: {$divide: ['$population', 1000000]}
  }}
]);


# 5. Show the name and population density for France, Germany, and Italy
db.world.aggregate([
  {$match: {
    name: {$in: ['France', 'Germany', 'Italy']}
  }},
  {$project: {
    _id:0,
    name:1,
    'population density': {$divide: ['$population', '$area']}
  }}
]);


# 6. Order the continents by area from most to least.
db.world.aggregate([
  {$group: {
    _id: '$continent',
    area: {$sum: '$area'}
  }},
  {$sort:{
    area: -1
  }},
  {$project:{
    _id:0,
    area:1
  }}
]);

# 7. Show the only two continents with total area greater than 25000000 and then sort from largest to smallest.
db.world.aggregate([
  # get the total area of all countries in a continent
  {$group: {
    # reset the id field to be the continent name field
    _id: '$continent',
    area: {$sum: '$area'}
  }},
  # select only those continents with an area over > 25000000
  {$match: {
    area: {$gt: 25000000}
  }},
  # sort the results by continent area
  {$sort: {
    area: -1
  }},
  # display the output
  {$project: {
    _id:1, # the continent name
    area:1 # the calculated area
  }}
])

# 8. For each continent show the first and last country alphabetically like this:
# { "_id" : "Africa", "from" : "Algeria", "to" : "Zimbabwe" }
# { "_id" : "Asia", "from" : "Afghanistan", "to" : "Yemen" }
# ...
# { "_id" : "South America", "from" : "Argentina", "to" : "Venezuela" }
db.world.aggregate([
  {$sort: { -- sort the whole list by continent, then country name
    continent: -1,
    name: 1
  }},
  {$group: { --group by continent
    _id: '$continent',
    from: {$first: "$name"}, -- grab the alpha first name per continent
    to: {$last: "$name"} -- grab the alpha last name per continent
  }},
  {$project: {
    _id: 1,
    from: 1,
    to: 1
  }}
])


# 9. Group countries according to the first letter of the name. As shown. Only give "U" through to "Z". You will need to use the $substr function and the $push aggregate function.
# { "_id" : "U", "list" : [ "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan" ] }
# { "_id" : "V", "list" : [ "Vanuatu", "Vatican City", "Venezuela", "Vietnam" ] }
db.world.aggregate([
  { $match: {
    name: {$gt: 'U'}
  }},
  { $group: {
    _id: { $substr:[ '$name', 0, 1 ] },
    list: { $push: '$name' }
  }},
  { $sort: { _id: 1, list: -1} },
  { $project: { _id:1, list:1 }}
]);


# 10. Combine North America and South America to America, and then list the continents by area. Biggest first.
db.world.aggregate([
    {$group:{
        _id:{
            $cond: { 
              if: {$eq:["$continent","North America"]}, 
              then: 'America', 
              else: { $cond: { 
                      if: {$eq:["$continent","South America"]},
                      then: "America",
                      else: "$continent"
                    }}
            }
        },
        area:{$sum: "$area"}
    }},
    {$sort:{
        area: -1
    }},
    {$project:{
        _id:1,
        area:1
    }}
]);



# 11. Show the name and the continent for countries beginning with N - but replace the continent Oceania with Australasia.
db.world.aggregate([
    {$match:{
        name:{$regex:"^N"}
    }},

    { $project:{ 
      _id:0, 
      name:1, 
      continent: { $cond: { if: { $eq: ['$continent', 'Oceania'] }, then: 'Australasia', else: '$continent' } }
    }}
])
